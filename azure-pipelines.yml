#
# Will deploy openshift in different Use Cases.
# Needs some variables to be set in azure pipelines Web IHM to work.
# * Azure Stack needed vars: 
#     azs_pool_name: Azure Pipelines pool to use with Azure Stack (VM must be able to reach your Azure Stack)
#     azs_arm_endpoint: The ResourceManagerUrl in the Azure Stack (example: https://management.local.azurestack.external)
#     azs_suffix_storage_endpoint: use an endpoint for your Azure Stack (example: local.azurestack.external)
#     azs_suffix_keyvault_dns: use an endpoint for your Azure Stack (example: .vault.local.azurestack.external)
#     azs_subscription_id: Subscrition ID to use to test the deployment of OpenShift on Azure Stack
#     azs_location: Azure Stack location to use
# * Service Principal needed vars:
#     sp_app_id: Service Principal Application ID
#     sp_tenant_id: Service Principal Tenant ID
#     sp_secret: Service Principal Secret (must be stored encrypted, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables)
trigger:
- stack311*

variables:
  local_id: $(Build.BuildNumber).$(Build.BuildId)

stages:
- stage: azs_deploy
  displayName: Azure Stack Deploy
  jobs:
  - job: azs_ocp_1master_selfsignedcerts
    displayName: OCP with 1 Master LB and self signed certificates
    pool: $(azs_pool_name)
    variables:
      rg_name: ci_ocp_1_master_sscerts_$(local_id)
    steps:

    # The cloud may have already been registered. We ignore any error
    - script: |
        az cloud register -n AzureStackUser \
          --endpoint-resource-manager "$(azs_arm_endpoint)" \
          --suffix-storage-endpoint "$(azs_suffix_storage_endpoint)" \
          --suffix-keyvault-dns "$(azs_suffix_keyvault_dns)"
        echo "Anything because we want to always exit with 0 in case AzureStackUser already exists"
      displayName: az cloud registering Azure Stack

    - script: az cloud set --name AzureStackUser
      displayName: Switch az cli to use Azure Stack cloud

    - script: |
        az login --service-principal -u $(sp_app_id) \
          -p $(sp_secret) \
          --tenant $(sp_tenant_id)
      displayName: az login with service principal

    - script: az account set -s $(azs_subscription_id)
      displayName: Set az account to the right subscription id

    - script: |
        az group create -n $(rg_name) -l $(azs_location)
      displayName: create a resource group
